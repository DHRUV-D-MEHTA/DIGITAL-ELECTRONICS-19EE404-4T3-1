// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/10/2024 10:26:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    EX5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EX5_vlg_sample_tst(
	din0,
	din1,
	din2,
	din3,
	din4,
	din5,
	din6,
	din7,
	sampler_tx
);
input  din0;
input  din1;
input  din2;
input  din3;
input  din4;
input  din5;
input  din6;
input  din7;
output sampler_tx;

reg sample;
time current_time;
always @(din0 or din1 or din2 or din3 or din4 or din5 or din6 or din7)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module EX5_vlg_check_tst (
	dout0,
	dout1,
	dout2,
	sampler_rx
);
input  dout0;
input  dout1;
input  dout2;
input sampler_rx;

reg  dout0_expected;
reg  dout1_expected;
reg  dout2_expected;

reg  dout0_prev;
reg  dout1_prev;
reg  dout2_prev;

reg  dout0_expected_prev;
reg  dout1_expected_prev;
reg  dout2_expected_prev;

reg  last_dout0_exp;
reg  last_dout1_exp;
reg  last_dout2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	dout0_prev = dout0;
	dout1_prev = dout1;
	dout2_prev = dout2;
end

// update expected /o prevs

always @(trigger)
begin
	dout0_expected_prev = dout0_expected;
	dout1_expected_prev = dout1_expected;
	dout2_expected_prev = dout2_expected;
end



// expected dout0
initial
begin
	dout0_expected = 1'bX;
end 

// expected dout1
initial
begin
	dout1_expected = 1'bX;
end 

// expected dout2
initial
begin
	dout2_expected = 1'bX;
end 
// generate trigger
always @(dout0_expected or dout0 or dout1_expected or dout1 or dout2_expected or dout2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dout0 = %b | expected dout1 = %b | expected dout2 = %b | ",dout0_expected_prev,dout1_expected_prev,dout2_expected_prev);
	$display("| real dout0 = %b | real dout1 = %b | real dout2 = %b | ",dout0_prev,dout1_prev,dout2_prev);
`endif
	if (
		( dout0_expected_prev !== 1'bx ) && ( dout0_prev !== dout0_expected_prev )
		&& ((dout0_expected_prev !== last_dout0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout0_expected_prev);
		$display ("     Real value = %b", dout0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout0_exp = dout0_expected_prev;
	end
	if (
		( dout1_expected_prev !== 1'bx ) && ( dout1_prev !== dout1_expected_prev )
		&& ((dout1_expected_prev !== last_dout1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout1_expected_prev);
		$display ("     Real value = %b", dout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dout1_exp = dout1_expected_prev;
	end
	if (
		( dout2_expected_prev !== 1'bx ) && ( dout2_prev !== dout2_expected_prev )
		&& ((dout2_expected_prev !== last_dout2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout2_expected_prev);
		$display ("     Real value = %b", dout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dout2_exp = dout2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module EX5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg din0;
reg din1;
reg din2;
reg din3;
reg din4;
reg din5;
reg din6;
reg din7;
// wires                                               
wire dout0;
wire dout1;
wire dout2;

wire sampler;                             

// assign statements (if any)                          
EX5 i1 (
// port map - connection between master ports and signals/registers   
	.din0(din0),
	.din1(din1),
	.din2(din2),
	.din3(din3),
	.din4(din4),
	.din5(din5),
	.din6(din6),
	.din7(din7),
	.dout0(dout0),
	.dout1(dout1),
	.dout2(dout2)
);

// din0
initial
begin
	din0 = 1'b1;
	din0 = #10000 1'b0;
	din0 = #150000 1'b1;
	din0 = #10000 1'b0;
end 

// din1
initial
begin
	din1 = 1'b0;
	din1 = #10000 1'b1;
	din1 = #10000 1'b0;
	din1 = #130000 1'b1;
	din1 = #10000 1'b0;
	din1 = #10000 1'b1;
	din1 = #10000 1'b0;
end 

// din2
initial
begin
	din2 = 1'b0;
	din2 = #20000 1'b1;
	din2 = #10000 1'b0;
	din2 = #110000 1'b1;
	din2 = #10000 1'b0;
end 

// din3
initial
begin
	din3 = 1'b0;
	din3 = #30000 1'b1;
	din3 = #10000 1'b0;
	din3 = #90000 1'b1;
	din3 = #10000 1'b0;
end 

// din4
initial
begin
	din4 = 1'b0;
	din4 = #40000 1'b1;
	din4 = #10000 1'b0;
	din4 = #70000 1'b1;
	din4 = #10000 1'b0;
	din4 = #50000 1'b1;
	din4 = #10000 1'b0;
end 

// din5
initial
begin
	din5 = 1'b0;
	din5 = #50000 1'b1;
	din5 = #10000 1'b0;
	din5 = #50000 1'b1;
	din5 = #10000 1'b0;
end 

// din6
initial
begin
	din6 = 1'b0;
	din6 = #60000 1'b1;
	din6 = #10000 1'b0;
	din6 = #30000 1'b1;
	din6 = #10000 1'b0;
end 

// din7
initial
begin
	din7 = 1'b0;
	din7 = #70000 1'b1;
	din7 = #10000 1'b0;
	din7 = #10000 1'b1;
	din7 = #10000 1'b0;
	din7 = #90000 1'b1;
end 

EX5_vlg_sample_tst tb_sample (
	.din0(din0),
	.din1(din1),
	.din2(din2),
	.din3(din3),
	.din4(din4),
	.din5(din5),
	.din6(din6),
	.din7(din7),
	.sampler_tx(sampler)
);

EX5_vlg_check_tst tb_out(
	.dout0(dout0),
	.dout1(dout1),
	.dout2(dout2),
	.sampler_rx(sampler)
);
endmodule

